using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Net;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Http;
using Microsoft.Azure.WebJobs;
using Microsoft.Azure.WebJobs.Extensions.Http;
using Microsoft.Extensions.Logging;
using Microsoft.WindowsAzure.Storage;
using Microsoft.WindowsAzure.Storage.Table;
using Newtonsoft.Json;

namespace AzureFunctions
{
    public static class EAFU
    {
        static string connectionString = Environment.GetEnvironmentVariable("STORAGE_ACCOUNT_CONNECTION_STRING");
        static string table = Environment.GetEnvironmentVariable("STORAGE_ACCOUNT_PLAYER_TABLE");
    [FunctionName("PostPlayer")]
        public static async Task<IActionResult> Post([HttpTrigger(AuthorizationLevel.Admin, "post", Route = "player")] 
            HttpRequest req, ILogger log)
        {
            // Parse the request body to player object
            string requestBody = await new StreamReader(req.Body).ReadToEndAsync();
            Player player = JsonConvert.DeserializeObject<Player>(requestBody);

            // Get a reference to the  table
            CloudTable playerTable = await connectionString.GetCloudTable(table);

            // Set the ID and create the TableOperation for inserting the player
            PlayerEntity playerEntity = new PlayerEntity(player);
            TableOperation insertOperation = TableOperation.Insert(playerEntity);

            // Execute the insert operation
            await playerTable.ExecuteAsync(insertOperation);

            log.LogInformation($"Added player with ID: {player.Id}");

            return new OkObjectResult(player);
        }

        // This function will be called with a specific leaderboardCount
        [FunctionName("GetLeaderboardWithCount")]
        public static async Task<IActionResult> GetWithCount([HttpTrigger(AuthorizationLevel.Admin, "get", Route = "leaderboard/{leaderboardCount}")]
            HttpRequest req, int leaderboardCount, ILogger log)
        {
            return await GetLeaderboardInternal(req, leaderboardCount, log);
        }

        // This function will be called without a leaderboardCount and use a default value
        [FunctionName("GetLeaderboard")]
        public static async Task<IActionResult> GetWithoutCount([HttpTrigger(AuthorizationLevel.Admin, "get", Route = "leaderboard/")]
            HttpRequest req, ILogger log)
        {
            int defaultLeaderboardCount = 10; // You can set this to any default value you want
            return await GetLeaderboardInternal(req, defaultLeaderboardCount, log);
        }

        private static async Task<IActionResult> GetLeaderboardInternal(HttpRequest req, int leaderboardCount, ILogger log)
        {
            try
            {
                // Retrieve the top N players based on score
                List<PlayerEntity> topPlayers = new List<PlayerEntity>();

                // Retrieve the leaderboard elements
                TableQuery<PlayerEntity> query = new TableQuery<PlayerEntity>();

                // Get a reference to the  table
                CloudTable playerTable = await connectionString.GetCloudTable(table);

                TableContinuationToken continuationToken = null;
                do
                {
                    TableQuerySegment<PlayerEntity> segment = await playerTable.ExecuteQuerySegmentedAsync(query, continuationToken);
                    topPlayers.AddRange(segment.Results);
                    continuationToken = segment.ContinuationToken;
                } while (continuationToken != null);

                // Process the top players
                List<Player> leaderboard = topPlayers
                    .OrderByDescending(x => x.Score)
                    .Take(leaderboardCount)
                    .Select(playerEntity => new Player(playerEntity))
                    .ToList();

                // Now you have the leaderboard list with the top players based on score
                // You can use the leaderboard list as needed
                return new OkObjectResult(leaderboard);
            }
            catch (Exception ex)
            {
                return new BadRequestObjectResult($"Error retrieving leaderboard: {ex.Message}");
            }
        }

        public class Player
        {
            [JsonProperty(PropertyName = "id")]
            public string Id { get; set; }
            public string Name { get; set; }
            public int Score { get; set; }
            public int GameDuration { get; set; }

            public Player(PlayerEntity playerEntity)
            {
                Id = playerEntity.Id;
                Name = playerEntity.Name;
                Score = playerEntity.Score;
                GameDuration = playerEntity.GameDuration;
            }

            [JsonConstructor]
            public Player(string id, string name, int score, int gameDuration)
            {
                Id = id;
                Name = name;
                Score = score;
                GameDuration = gameDuration;
            }
        }

        public class PlayerEntity : TableEntity
        {
            [JsonProperty(PropertyName = "id")]
            public string Id { get; set; }
            public string Name { get; set; }
            public int Score { get; set; }
            public int GameDuration { get; set; }

            public PlayerEntity(Player player)
            {
                this.PartitionKey = Guid.NewGuid().ToString();
                this.RowKey = Guid.NewGuid().ToString();

                this.Id = player.Id;
                this.Name = player.Name;
                this.Score = player.Score;
                this.GameDuration = player.GameDuration;
            }

            public PlayerEntity() { }
        }
    }

    public static class CloudTableExtensions
    {
        public static async Task<CloudTable> GetCloudTable(this string connectionString, string tableName)
        {
            // Create a CloudStorageAccount instance using the connection string
            CloudStorageAccount storageAccount = CloudStorageAccount.Parse(connectionString);

            // Create the table client
            CloudTableClient tableClient = storageAccount.CreateCloudTableClient();

            var cloudTable = tableClient.GetTableReference(tableName);

            await cloudTable.CreateIfNotExistsAsync();
            
            // Get a reference to the table
            return tableClient.GetTableReference(tableName);
        }
    }
}
